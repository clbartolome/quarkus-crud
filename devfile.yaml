schemaVersion: 2.2.0
metadata:
  name: quarkus-crud
  displayName: Quarkus CRUD IDE
  description: Quarkus CRUD IDE development environment
  icon: https://design.jboss.org/quarkus/logo/final/SVG/quarkus_icon_rgb_default.svg
  tags:
    - Java
    - Quarkus
  projectType: Quarkus
  language: Java
  version: 1.3.0
components:
  - name: tools
    container:
      image: registry.access.redhat.com/ubi9/openjdk-21:1.22
      args: ['tail', '-f', '/dev/null']
      memoryLimit: 1024Mi ## default app nowhere needs this but leaving room for expansion.
      mountSources: true
      volumeMounts:
        - name: m2
          path: /home/user/.m2
      endpoints:
        - name: persons-get
          targetPort: 8080
          protocol: http
          path: /persons
        - name: health-live
          targetPort: 8080
          protocol: http
          path: /q/health/live
        - name: dev-console
          targetPort: 8080
          protocol: http
          path: /q/dev-ui/welcome
  - name: postgres
    container:
      image: postgres:17
      env:
        - name: PGDATA
          value: /tmp/pgdata
        - name: POSTGRES_USER
          value: local
        - name: POSTGRES_PASSWORD
          value: pass
        - name: POSTGRES_DB
          value: quarkus-db
      memoryLimit: 512Mi
      mountSources: true
      sourceMapping: /projects
      volumeMounts:
        - name: postgresql-data
          path: /var/lib/postgresql/data
  - name: m2
    volume:
      size: 1Gi
  - name: postgresql-data
    volume: {}
commands:
  - id: unit-test
    exec:
      label: 1. Run unit tests
      component: tools
      commandLine: './mvnw -Dmaven.repo.local=/home/user/.m2/repository test'
      workingDir: ${PROJECT_SOURCE}
  - id: dev-run
    exec:
      label: 2. Run Quarkus dev mode
      component: tools
      commandLine: './mvnw  -Dmaven.repo.local=/home/user/.m2/repository quarkus:dev -Dquarkus.http.host=0.0.0.0'
      hotReloadCapable: true
      group:
        kind: run
        isDefault: true
      workingDir: ${PROJECT_SOURCE}
  - id: init-db
    exec:
      label: 3. Initialize the database schema
      component: postgres
      commandLine: |
        bash -c "echo '
        CREATE TABLE IF NOT EXISTS person (
          id SERIAL PRIMARY KEY,
          name VARCHAR(100),
          email VARCHAR(100) UNIQUE
        );
        ' | psql -U local -d quarkus-db"
      workingDir: /projects
  - id: add-users
    exec:
      label: 4. Add sample users to the database
      component: postgres
      commandLine: |
        bash -c "echo \"
        INSERT INTO person (name, email) VALUES
          ('Alice', 'alice@example.com'),
          ('Bob', 'bob@example.com')
        ON CONFLICT (email) DO NOTHING;
        \" | psql -U local -d quarkus-db"
      workingDir: /projects

  - id: list-users
    exec:
      label: 5. List users from the database
      component: postgres
      commandLine: |
        bash -c "echo '
        SELECT * FROM person;
        ' | psql -U local -d quarkus-db"
      workingDir: /projects
  - id: cleanup-db
    exec:
      label: 6. Clean up the database schema
      component: postgres
      commandLine: |
        bash -c "echo '
        DROP TABLE IF EXISTS person;
        ' | psql -U local -d quarkus-db"
      workingDir: /projects